[문제 1] 문자열과 문자열을 저장할 수 있는 배열이 주어집니다. 문자열을 배열에 복사하는 프로그램을 작성하세요.

char* src = "C Programming";
char dest[100];

요구조건은 다음과 같습니다.

	문자열을 복사해 넣을 배열과 문자열을 인수로 전달받아 전달받은 문자열을 배열에 복사하는 함수를 선언하고 정의합니다.
	main() 함수에서는 위의 함수 호출을 통해 문자열 복사를 수행한 후 결과를 확인합니다.



#include <stdio.h>

void copy(char* dest, const char* src) {
    while (*src != '\0') {
        *dest = *src;
        src++;
        dest++;
    }
}

int main() {
    char* src = "C Programming";
    char dest[100] = { '\0' };
    printf("복사 전 : %s\n", dest);
    copy(dest, src);
    printf("복사 후 : %s\n", dest);

    return 0;
}



[문제 2] 문자열의 길이를 구하는 프로그램을 작성하세요.

char* src = "ABCD";

요구조건은 다음과 같습니다.

	문자열을 전달 받아 문자열이 포함하고 있는 문자열의 길이를 반환하는 함수를 선언하고 정의합니다.
	문자열의 길이에는 널 문자는 포함되지 않습니다.
	문자열의 길이는 문자열의 시작 문자부터 널 문자를 만나기 이전까지의 문자 수를 카운트 합니다.
	main() 함수에서는 위의 함수 호출을 통해 문자열의 길이 값을 구하고 출력합니다.


#include <stdio.h>

int length(const char *string) {
    int len = 0;
    while (*string++ != '\0') len++;
    return len;
}

int main() {
    const char* str = "ABCD";
    int strLength = length(str);
    printf("문자열 %s의 길이 : %d\n", str, strLength);

    return 0;
}




[문제 3] 두 문자열을 비교하는 프로그램을 작성하세요.

char* a = "ABCD";
char* b = "ABC";

요구조건은 다음과 같습니다.

	두 문자열을 전달받아 문자열을 비교하는 함수를 선언하고 정의합니다.
	문자열의 비교는 첫 번째 문자는 첫 번째 문자끼리 비교를 하며 첫 번째 문자가 같으면 두 번째 문자끼리 비교를 합니다.
	문자 비교 결과 두 문자 값이 다를 경우 두 문자 값의 차이 값을 반환합니다.
	main() 함수에서는 위의 함수 호출을 통해 문자열을 비교하고 결과를 출력합니다.


#include <stdio.h>

int compare(const char *s1, const char *s2) {

    while (1) {
        if (*s1 == *s2 && *s1 == '\0') {
            return 0;
        }
        else if (*s1 != *s2) {
            return (*s1 - *s2);
        }
        else {
            s1++;
            s2++;
        }
    }
}

int main() {
    char* a = "ABCa";
    char* b = "ABCA";
    int result = compare(a, b);
    printf("%d\n", result);

    return 0;
}



[문제 4] 두 문자열을 비교하는 프로그램을 작성하세요. (비교 문자수 지정)

char* a = "ABCD";
char* b = "ABC";

요구조건은 다음과 같습니다.

	두 개의 문자열과 비교할 문자의 수를 전달받아 문자열을 비교하는 함수를 선언하고 정의합니다.
	문자열의 비교는 첫 번째 문자는 첫 번째 문자끼리 비교를 하며 첫 번째 문자가 같으면 두 번째 문자끼리 비교를 합니다.
	문자열의 비교는 함수 호출 시 전달 받은 문자의 수 만큼 비교를 합니다.
	문자 비교 결과 두 문자 값이 다를 경우 두 문자 값의 차이 값을 반환합니다.
	main() 함수에서는 위의 함수 호출을 통해 문자열을 비교하고 결과를 출력합니다.


#include <stdio.h>

int compare(const char *s1, const char *s2, int length) {

    while (length > 0) {
        if (*s1 == *s2 && *s1 == '\0') {
            return 0;
        }
        else if (*s1 != *s2) {
            return (*s1 - *s2);
        }
        else {
            s1++;
            s2++;
            length--;
        }
    }

    return 0;
}

int main() {
    char* a = "ABCa";
    char* b = "ABCA";
    int result = compare(a, b, 3);
    printf("%d\n", result);

    return 0;
}



[문제 5] 문자열을 정수 값으로 변환하여 출력하는 함수를 작성합니다.

char* str = "1234";
char* tail = str;

요구조건은 다음과 같습니다.

	문자열을 전달받아 정수 값으로 변환하는 함수를 선언하고 정의합니다.
	함수는 변환할 문자열과 변환에 실패한 위치를 가리키기 위한 포인터를 파라미터로 가집니다.
	전달받은 문자열의 첫 번째 문자로부터 변환을 시작합니다.
	파라미터로 전달받은 포인터는 변환하고자 하는 문자의 주소 값을 저장합니다.
	함수는 변환된 값을 반환합니다.
	main() 함수에서는 함수 호출을 통해 문자열을 정수 값으로 변환합니다.
	변환 성공 여부는 tail 포인터를 통해 확인합니다.

 
#include <stdio.h>

int length(const char *string) {
    int len = 0;
    while (*string++ != '\0') len++;
    return len;
}

int convert(const char *string, const char** tailPtr) {
    int retval = 0;
    while ((*string >= '0') && (*string <= '9')) {
        retval *= 10;
        retval += *string - '0';
        *tailPtr = ++string;
    }
    return retval;
}

int main() {
    const char* str = "1234";
    const char* tail = str;
    int result = convert(str, &tail);
    int strLength = length(str);
    if (tail == (str + strLength)) {
        printf("%s 변환 값 : %d\n", str, result);
    }
    else {
        printf("변환에 실패하였습니다.\n");
    }

    return 0;
}



[문제 6] 다음의 문자열 내에서 단어 gram을 찾는 프로그램을 작성하세요.

char* str = "C Program is funny";

요구조건은 다음과 같습니다.

	문자열을 검색할 대상 문자열과 검색 문자열을 파라미터로 가지는 검색 함수를 선언하고 정의합니다.
	main() 함수에서는 위의 검색 함수를 사용하여 문자열 포함 여부를 출력합니다.
	표준 라이브러리에서 제공하는 strcmp(), strncmp() 함수는 사용할 수 없습니다.
	필요에 따라 문자열을 비교하는 함수를 선언하고 정의하여 사용합니다.

#include <stdio.h>

int length(const char *string) {
    int len = 0;
    while (*string++ != '\0') len++;
    return len;
}

int compare(const char *s1, const char *s2, int length) {
    while (length > 0) {
        if (*s1 == *s2 && *s1 == '\0') {
            return 0;
        }
        else if (*s1 != *s2) {
            return (*s1 - *s2);
        }
        else {
            s1++;
            s2++;
            length--;
        }
    }
    return 0;
}

int find(const char* string, const char *word) {
    int stringLen = length(string);
    int wordLen = length(word);

    if (stringLen < wordLen) return -1;
    for (int i=0 ; i<(stringLen - wordLen + 1) ; i++) {
        if (compare(string + i, word, wordLen) == 0) {
            return i;
        }
    }
    return -1;
}

int main() {
    const char* str = "C Program is funny";
    const char* findStr = "funny";
    int idx = find(str, findStr);
    printf("%s내의 %s의 위치 : %d\n", str, findStr, idx);
    return 0;
}


[문제 7] 단어로 구성된 배열(포인터 배열)이 주어집니다. 배열 내에서 단어를 검색하여 단어가 포함된 원소의 인덱스를 출력하는 프로그램을 작성하세요.

char* words[] = { "KOREA", "PROGRAM", "CODING", "SECURE", "ENGINE" };

요구조건은 다음과 같습니다.

	포인터 배열과 찾을 단어를 파라미터로 하는 함수를 선언하고 정의합니다.
	함수는 전달받은 포인터 배열로 부터 단어를 원소로 하는 원소를 찾아 인덱스 값을 반환합니다.
	만약 배열이 단어를 원소로 가지지 않은 경우 -1을 반환합니다.
	main() 함수에서는 위의 함수 호출을 통해 배열이 단어를 포함하는 지의 여부를 출력합니다.
	표준 라이브러리 함수 strcmp(), strncmp() 함수는 사용할 수 없습니다.
	필요에 따라 문자열을 비교하는 함수를 선언하고 정의하여 사용합니다.


#include <stdio.h>

int compare(const char *s1, const char *s2) {
    while (1) {
        if (*s1 == *s2 && *s1 == '\0') {
            return 0;
        }
        else if (*s1 != *s2) {
            return (*s1 - *s2);
        }
        else {
            s1++;
            s2++;
        }
    }
    return 0;
}


int find(const char** words, int wordCount, const char* word) {
    for (int i=0 ; i<wordCount ; i++) {
        if (compare(words[i], word) == 0) {
            return i;
        }
    }
    return -1;
}

int main() {
    const char* words[] = { "KOREA", "PROGRAM", "CODING", "SECURE", "ENGINE" };
    int wordCount = (int)(sizeof(words)/sizeof(words[0]));
    int idx = -1;
    const char* findStr = NULL;

    findStr = "PROGRAM";
    idx = find(words, wordCount, findStr);
    printf("%s의 인덱스 : %d\n", findStr, idx);

    findStr = "KOREA";
    idx = find(words, wordCount, findStr);
    printf("%s의 인덱스 : %d\n", findStr, idx);

    findStr = "ENGINE";
    idx = find(words, wordCount, findStr);
    printf("%s의 인덱스 : %d\n", findStr, idx);

    findStr = "COREA";
    idx = find(words, wordCount, findStr);
    printf("%s의 인덱스 : %d\n", findStr, idx);

    return 0;
}

